AWSTemplateFormatVersion: 2010-09-09

Description: >-
  Urban Institute workflows:
  * Compute resources: any ECR or EC2 cluster
  * Repo resources: ECR Container repo and code commit resources
  * Data pipelines
  * Databases
  * Sagemaker/Jupyter notebooks

Parameters:
  WFName:
    Type: String

  CFTemplateS3Path:
    Type: String

  Environment:
    Type: String
    AllowedValues: [dev, test, prod]
    Default: dev

Mappings:
  GlobalParams:
    Vpc:
      VpcId: vpc-0884aba75474c5a4d
      VpcCidr: "10.0.0.0/20"
      PrivateSubnets: "subnet-0f2296d1facaad0d1,subnet-076aed91c3669be38,subnet-04b284cd9799f101b"
      PublicSubnets: "subnet-07d1e64a658e5d40c,subnet-0ecb2878f52b8d153,subnet-00f970f7a1365d359"
    Deployment:
      DataloaderEC2Subnet: "subnet-07d1e64a658e5d40c" #one of the public subnet
      SubnetsForAuroraServerlessRDSSubnetGroup: "subnet-0f2296d1facaad0d1,subnet-076aed91c3669be38,subnet-04b284cd9799f101b"
      #although Aurora Serverless can be deployed in public subnet, it can't have a public IP address see
      #https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations
      #so if public access is required, it is necessary to provide a proxy
      SubnetsForRedshiftSubnetGroup: "subnet-07d1e64a658e5d40c,subnet-0ecb2878f52b8d153,subnet-00f970f7a1365d359" #the public subnets
      RDSPostgresSubnets: "subnet-07d1e64a658e5d40c,subnet-0ecb2878f52b8d153,subnet-00f970f7a1365d359" #the public subnets
      SagemakerSubnet: "subnet-07d1e64a658e5d40c" #one of the public subnet


Resources:

  WorkflowSecurityGroupsTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub ${CFTemplateS3Path}/step_020_01_security_groups.yaml
      Parameters:
        WFName: !Ref WFName
        Environment: !Ref Environment
        CFTemplateS3Path: !Ref CFTemplateS3Path
        VpcId: !FindInMap [GlobalParams, Vpc, VpcId]
        VpcCidr: !FindInMap [GlobalParams, Vpc, VpcCidr]

  WorkflowIAMRolesTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub ${CFTemplateS3Path}/step_020_02_iam_roles.yaml
      Parameters:
        WFName: !Ref WFName
        CFTemplateS3Path: !Ref CFTemplateS3Path
        Environment: !Ref Environment

  ECRReposTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub ${CFTemplateS3Path}/step_030_01_ecr_repos.yaml
      Parameters:
        WFName: !Ref WFName
        CFTemplateS3Path: !Ref CFTemplateS3Path
        Environment: !Ref Environment

  # ALB with pgadmin service
  #  ElasticLoadBalancersTemplate:
  #    Type: AWS::CloudFormation::Stack
  #    Properties:
  #      TemplateURL:
  #        !Sub ${CFTemplateS3Path}/step_030_02_albs_for_pgadmin.yaml
  #      Parameters:
  #        WFName: !Ref WFName
  #        CFTemplateS3Path: !Ref CFTemplateS3Path
  #        Environment: !Ref Environment

  #create the ECR Fargate cluster to run any thing significant
  #at the present time, we will only create a fargate cluster to run any data processing job
  ECRClusterResourcesTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub ${CFTemplateS3Path}/step_030_03_ecr_clusters.yaml
      Parameters:
        WFName: !Ref WFName
        CFTemplateS3Path: !Ref CFTemplateS3Path
        Environment: !Ref Environment

  ECRTasksAndServicesTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub ${CFTemplateS3Path}/step_030_04_ecr_tasks_and_services.yaml
      Parameters:
        WFName: !Ref WFName
        CFTemplateS3Path: !Ref CFTemplateS3Path
        Environment: !Ref Environment

  RDSDatabaseTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub ${CFTemplateS3Path}/step_030_05_rds_database.yaml
      Parameters:
        WFName: !Ref WFName
        CFTemplateS3Path: !Ref CFTemplateS3Path
        Environment: !Ref Environment
        RDSDBName: "{{resolve:secretsmanager:UrbanInstituteDevRDSParameter:SecretString:POSTGRES_DBNAME}}"
        RDSDBUsername: "{{resolve:secretsmanager:UrbanInstituteDevRDSParameter:SecretString:POSTGRES_USERNAME}}"
        RDSDBPassword: "{{resolve:secretsmanager:UrbanInstituteDevRDSParameter:SecretString:POSTGRES_PASSWORD}}"
        RDSPostgresSubnets: !FindInMap [GlobalParams, Deployment, RDSPostgresSubnets]
        RDSPostgresSecurityGroup: !GetAtt WorkflowSecurityGroupsTemplate.Outputs.RDSDatabaseSecurityGroup
        RDSPostgresEnhancedMonitoringRoleArn: !GetAtt WorkflowIAMRolesTemplate.Outputs.RDSPostgresEnhancedMonitoringRoleArn

# Data loader EC2 template
# use this micro/small ec2 to run long running SQL statements without
  DataloaderEC2Template:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub ${CFTemplateS3Path}/step_030_06_dataloader.yaml
      Parameters:
        WFName: !Ref WFName
        CFTemplateS3Path: !Ref CFTemplateS3Path
        Environment: !Ref Environment
        DataloaderIamInstanceProfile: !GetAtt WorkflowIAMRolesTemplate.Outputs.DataloaderInstanceProfile
        DataLoaderEC2SecurityGroup: !GetAtt WorkflowSecurityGroupsTemplate.Outputs.DataLoaderEC2SecurityGroup
        DataloaderSubnet: !FindInMap [GlobalParams, Deployment, DataloaderEC2Subnet]
        VpcId: !FindInMap [GlobalParams, Vpc, VpcId]

#  Redshift currently doesn't represent any value.  It's unlikely that it will increase speed of
#  geometry based selection and merging, as geometry type can not yet be used as a key
#  RedshiftTemplate:
#    Type: AWS::CloudFormation::Stack
#    Properties:
#      TemplateURL:
#        !Sub ${CFTemplateS3Path}/step_030_07_redshift_deployment.yaml
#      Parameters:
#        WFName: !Ref WFName
#        CFTemplateS3Path: !Ref CFTemplateS3Path
#        Environment: !Ref Environment
#        SubnetsForDBSubnetGroups: !FindInMap [GlobalParams, Deployment, SubnetsForRDSSubnetGroup]

  SakemakerTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub ${CFTemplateS3Path}/step_030_08_sagemaker_deployment.yaml
      Parameters:
        WFName: !Ref WFName
        CFTemplateS3Path: !Ref CFTemplateS3Path
        Environment: !Ref Environment
        SageMakerSubnet: !FindInMap [GlobalParams, Deployment, SagemakerSubnet]
        VpcId: !FindInMap [GlobalParams, Vpc, VpcId]
        SageMakerIamRoleArn: !GetAtt WorkflowIAMRolesTemplate.Outputs.SageMakerIamRoleArn
        SageMakerSecurityGroupIds: !GetAtt WorkflowSecurityGroupsTemplate.Outputs.SageMakerSecurityGroup


